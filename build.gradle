buildscript {
   repositories {
      maven {
         url "https://plugins.gradle.org/m2/"
      }
   }
   dependencies {
      classpath "gradle.plugin.us.ihmc.gradle:ihmc-build:0.0.17"
      classpath "org.hidetake:gradle-ssh-plugin:2.1.1"
   }
}

apply plugin: 'java'
apply plugin: 'maven-publish'
apply plugin: "org.hidetake.ssh"
apply plugin: "us.ihmc.gradle.ihmc-build"


sourceCompatibility = 1.7
targetCompatibility = 1.7
version = '0.5.1'

project.ext.fullVersion = version
project.ext.vcsUrl = "https://github.com/ihmcrobotics/ihmcsoemwrapper"
project.ext.licenseURL = "http://www.apache.org/licenses/LICENSE-2.0.txt"
project.ext.licenseName = "Apache License, Version 2.0"
project.ext.bintrayLicenseName = "Apache-2.0"



sourceSets {
	main {
		java {
			srcDirs += 'src/'
		}
	}
}

repositories {
  jcenter()
  mavenCentral()
  mavenLocal()
  maven {
      url  "http://dl.bintray.com/ihmcrobotics/maven-release"
  }
}

dependencies {
    compile group: 'us.ihmc', name: 'SOEM', version: '1.3.1-ihmc3'
    compile group: 'us.ihmc', name: 'SOEM-platform-linux', version: '1.3.1-ihmc3'
    //compile group: 'us.ihmc', name: 'SOEM-platform-windows', version: '1.3.1-ihmc3'
    compile group: 'us.ihmc', name: 'IHMCNativeLibraryLoader', version: '1.0'
	compile group: 'us.ihmc', name: 'IHMCRealtime', version: '1.1.7'
   compile "com.neuronrobotics:nrjavaserial:3.10.2"

}

remotes {
   test {
      host = '10.7.1.160'

      // Set the username and password in ~/.gradle/gradle.properties.
      user = project.hasProperty('testbed_username') ? "${testbed_username}" : "invalid"
      password = project.hasProperty('testbed_password') ? "${testbed_password}" : "invalid"

      knownHosts = allowAnyHosts
   }
}

task deployTestBed(dependsOn: ['jar']) {
   def projectDir = project.buildscript.sourceFile.parent
   def directory = 'ethercat'

   doLast {
      if (!project.hasProperty('testbed_username') || !project.hasProperty('testbed_password'))
      {
         throw new GradleException("Please set testbed_username and testbed_password in ~/.gradle/gradle.properties. See https://docs.gradle.org/current/userguide/build_environment.html#sec:gradle_properties_and_system_properties for more information.")
      }

      ssh.run {
         session(remotes.test) {
            execute("mkdir -p " + directory + "/lib")

            configurations.runtime.each {
               put it, directory + '/lib'
            }

            put jar.archivePath, directory + '/ethercat.jar'

            def scriptDir = new File(projectDir, "launchScripts/")
            def scriptDirCollection = files { scriptDir.listFiles() }
            put scriptDirCollection, directory

            scriptDirCollection.each {
               execute 'chmod 777 ' + directory + '/' + it.name
            }
         }
      }
   }
}



task sourceJar(type: Jar) {
	from sourceSets.main.allJava
}

jar {
   List depend = []
   configurations.runtime.each {
      depend.add('lib/' + it.name)
   }

   manifest {
      attributes(
      "Created-By": "IHMC Gradle Build Script",
      "Implementation-Title": project.name,
      "Implementation-Version": project.version,
      "Implementation-Vendor": "IHMC",

      "Bundle-Name": project.name,
      "Bundle-Version": project.version,
      "Bundle-License": project.ext.licenseURL,
      "Bundle-Vendor": "IHMC",
      'Class-Path': depend.join(' '),
      'Main-class': 'us.ihmc.etherCAT.master.SlaveInfo')
   }
}

publishing {
	publications {
		mavenJava(MavenPublication) {

			groupId 'us.ihmc'
			artifactId project.name
			version "$version"
			from components.java

			pom.withXml {
                            asNode().children().last() + {
                                resolveStrategy = Closure.DELEGATE_FIRST
                                name project.name
                                url project.ext.vcsUrl
                                licenses {
                                    license {
                                        name project.ext.licenseName
                                        url project.ext.licenseURL
                                        distribution 'repo'
                                    }
                                }
                                developers {
                                    developer {
                                        id 'jsmith'
                                        name 'Jesper Smith'
                                        email 'jsmith@ihmc.us'
                                    }
                                }
                            }

                            }


			artifact sourceJar {
				classifier "sources"
			}
		}
	}
}

def labels = ['ihmc', 'robotics', 'java', 'embedded', 'ethercat']
ihmc.configureForIHMCOpenSourceBintrayPublish(false, "mavenJava", "maven-release", labels)
